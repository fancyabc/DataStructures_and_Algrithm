
树的存储结构：
	双亲表示法
		#define MAX_TREE_SIZE 100
		typedef int TElemType;
		typedef struct PTNode   //节点结构
		{
			TElemType data;
			int parent;        //双亲位置
		}PTNode;
		
		typedef struct{                //树结构
			PTNode nodes[MAX_TREE_SIZE];   //节点数组
			int r,n;     //根的位置和节点数-
		}PTree;
		
		
		
	孩子表示法
		#define MAX_TREE_SIZE 100
		typedef struct CTNode   //节点结构
		{
			int parent;        //双亲位置
			struct CTNode *next;
		}*ChildPtr;
		
		typedef struct{
			TElemType data;
			ChildPtr firstchild;       
		}CTBox;
		
		typedef struct{
			CTBox nodes[MAX_TREE_SIZE];
			int r,n;
		}CTree;
		
		
		
	孩子兄弟表示法
		typedef struct CSNode
		{
			TElemType data;
			struct CSNode *firstchild,*rightsib;
		}CSNode,*CTree;
		
		
二叉树定义：
	二叉树是n(n>=0)个节点的有限集合，该集合或者为空集或者由一个根节点和两棵互不相交的、
	分别为根节点的左子树和右子树的二叉树组成。
	
二叉树特点：
		1 每个节点最多有两棵子树
		2 左子树和右子树是有序的，次序不能任意颠倒
		3 即使树中某节点只有一棵子树，也要区分它是左子树还是右子树。
		
特殊二叉树：
	1 斜树：所有节点都只有左子树的二叉树叫左斜树，所有节点都只有右子树的二叉树叫做右斜树。
	2 满二叉树：在一棵二叉树中，如果所有分支节点都存在左子树和右子树，并且所有叶子节点都在同一层上，这样的二叉树称为满二叉树。
	特点：
		1 叶子节点只能出现在最下一层。
		2 非叶子节点的度一定是2
		3 在同样深度的二叉树中，满二叉树的节点个数最多，叶子数最多
	3 完全二叉树：对于一棵具有n个结点的二叉树按层数编号，如果编号为i(1<=i<=n)的节点与同样深度的满二叉树编号为i的节点在二叉树中
	位置完全相同，则称这棵树为完全二叉树。
	性质：
		1 叶子节点只能出现在最下两层。
		2 最下一层的叶子一定集中在左部连续位置
		3 倒数二层，若有叶子节点，一定都在右部连续位置
		4 如果节点度为1，则该节点只有左孩子，既不存在右子树的情况
		5 同样节点数的二叉树，完全二叉树的深度最小
	
二叉树的性质
	1 在二叉树的第i层至多有2^(i-1)个节点
	2 深度为k的二叉树至多有2^k-1个节点（k>=1）
	3 对于任何一棵二叉树T，如果其终端节点数为n0,度为2的节点数为n2,则n0=n2+1
	4 具有n个结点的完全二叉树深度为[log2n]+1
	5 
	
遍历二叉树
	/*前序遍历递归算法*/
	void PreOrderTraverse(BiTree T)
	{
		if(T==NULL)
			return;
		printf("%c",T->data);
		PreOrderTraverse(T->lchild);
		PreOrderTraverse(T->rchild);
	}
	
	/*中序遍历递归算法*/
	void InOrderTraverse(BiTree T)
	{
		if(T==NULL)
			return;
		InOrderTraverse(T->lchild);
		printf("%c",T->data);
		InOrderTraverse(T->rchild);
	}

	/*后序遍历递归算法*/
	void PostOrderTraverse(BiTree T)
	{
		if(T==NULL)
			return;
		PostOrderTraverse(T->lchild);
		
		PostOrderTraverse(T->rchild);
		printf("%c",T->data);
	}

	
